options {
	JAVA_UNICODE_ESCAPE=true;
	STATIC=false;					// 1 seul parseur actif a la fois (+ rapide)
	MULTI=true;						// type noeud = f(nom noeud)
	VISITOR=true;					// Cree une methode accept(visiteur)
}

//
// PARSER DEFINITION
//

PARSER_BEGIN(Parser)

package analyzer.ast;

public class Parser
{
	public static ASTProgram ParseTree(java.io.InputStream input) throws ParseException
	{
		Parser c = new Parser(input);
		return c.Program();
	}
}

PARSER_END(Parser)

//
// LEXICAL ANALYSIS
//

// White space

SKIP :
{
	< ( " " | "\t" | "\n" | "\r" )+	>
}

// Comments

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}




// Keywords
TOKEN :
{
	<PRINT: "print" > |
	<INPUT: "input" >|
	<WHILE:"while" >|
	<DO:"do">|
	<IF:"if">|
	<ELSE:"else">|
	<FOR:"for">|
	<RETURN:"return">|
	<BOOLEAN: "true"|"false">|
	<SWITCH: "switch">|
	<DEAFULT: "default">|
	<CASE:"case">
	// À compléter au besoin
}

// Operators
TOKEN :
{
	< ASSIGN: < EQUAL >  > |
	< COMPARE: < LESS > | < LESSEQUAL > | < GREAT > | <GREATEQUAL > | < DIFF > | < EQUALEQUAL > > |
    < LOGIC: < AND > | < OR > > |
	< #LESS: "<" > |
	< #LESSEQUAL: "<=" > |
	< #GREAT: ">" > |
	< #GREATEQUAL: ">=" > |
	< #DIFF: "!=" > |
	< #EQUALEQUAL: "==" > |

	< PLUS: "+" > |
	< MINUS: "-" > |
	< FOIS: "*" > |
	< DIV: "/" > |
    < NOT: "!" > |

	< #EQUAL: "=" > |
	< LPAREN: "(" > |
	< RPAREN: ")" > |
	< LACC: "{" > |
	< RACC: "}" > |
	< COLON: ":" > |
	< SEMICOLON: ";" > |
	< COMMA: "," > |
	< #AND: "&&" > |
	< #OR: "||" >|
	// À compléter au besoin
	<ARROW: "->">
}


// Identifiers and numbers
TOKEN :
{
	< IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > |
	< #LETTER: ["a"-"z","A"-"Z","_"] > |
	< #DIGIT: ["0"-"9"] > |
	< INTEGER: <NONEZEROINTEGER> | "0" > |
	<#NONEZEROINTEGER: ["1"-"9"] (["0"-"9"])*>|
	<REAL: (<MINUS>)? <POSITIVEREAL> >|
	<#POSITIVEREAL: ( (<NONEZEROINTEGER>)+|"0") "." (["0"-"9"])* (<EXPONENT>)? |
    			  (<NONEZEROINTEGER>)+ <EXPONENT>|
    			  "." (["0"-"9"])+ (<EXPONENT>)?

    > |
    <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >|

    <SIGNATURETYPE:<IDENTIFIER> <WHITESPACE> <IDENTIFIER>>|
    <WHITESPACE:(" ")+>
}



//
// SYNTAX ANALYSIS
//

// à compléter
void Stmt() #void: { }
{
	AssignStmt() <SEMICOLON> |
    WhileStmt()|
    DoWhileStmt()|
    IfStmt() |
    ForStmt()|
	ReturnStmt()|
	SwitchStmt()

}

ASTProgram Program() : { }
{
	Block() <EOF> { return jjtThis;  }
}

void Block() #void : { }
{
	 (Stmt())+
}

// à finir -- commencez ici!
void AssignStmt() : { }
{
    Identifier() <ASSIGN> Expr()
}

void Expr()#void : {}

{
    LOOKAHEAD(2) OpExpr() | LamdaFunctionExpr()
}

void BoolValue():{}
{
    <BOOLEAN>
}

void RealValue():{}
{
    <REAL>
}

void BasicExpr()#void:{}
{
    Identifier() | IntValue() | RealValue() | BoolValue()
}

void Identifier() : { }
{
	<IDENTIFIER>
}

void IntValue() : { }
{
	<INTEGER>
}

void WhileStmt():{}
{
    <WHILE> <LPAREN> Expr() <RPAREN>
    BlockOrStatement()
}

void BlockOrStatement() #void:{}
{
	<LACC> Block() <RACC>| Stmt()
}

void DoWhileStmt():{}
{
    <DO> BlockOrStatement() <WHILE> <LPAREN> Expr() <RPAREN> <SEMICOLON>
}

void IfStmt():{}
{
    <IF> <LPAREN> Expr() <RPAREN>
    BlockOrStatement()
    (LOOKAHEAD(2) ElseExpr())?
}



void ElseExpr():{}
{
    <ELSE> Stmt()
}

void ForStmt():{}
{
    <FOR> <LPAREN> (AssignStmt())? <SEMICOLON> (Expr())? <SEMICOLON> (AssignStmt())? <RPAREN>
    BlockOrStatement()
}

void ReturnStmt():{}
{
    <RETURN> Expr() <SEMICOLON>
}

void LamdaFunctionExpr():{}
{
    <LPAREN> (SignatureTypeExpr()(<COMMA> SignatureTypeExpr())*)? <RPAREN> (<ARROW> BlockOrStatement()|Stmt())
}

void SignatureTypeExpr():{}
{
    <SIGNATURETYPE>
}

void OpExpr()#void:{}
{
    AndOrExpr()
}

void AndOrExpr()#void: {}
{
    (ComparisonExpr() (<LOGIC> ComparisonExpr())*)#AndOrExpr(>1)
}

void ComparisonExpr()#void:{}
{
    (AddSubExpr() (<COMPARE> AddSubExpr())*)#ComparisonExpr(>1)
}

void AddSubExpr()#void:{}
{
    (MultDivExpr() (AddExpr() | SubExpr())*)#AddSubExpr(>1)
}

void MultDivExpr()#void:{}
{
    (NegExpr() (MultExpr() | DivExpr())*)#MultDivExpr(>1)
}

void NegExpr()#void:{}
{
   ((Negative())? NotExpr())#NegExpr(>1)
}

void Negative():{}
{
    <MINUS> (Negative())?
}

void NotExpr()#void:{}
{
   ((LogicalNot())? ParenExpr())#NotExpr(>1)
}

void LogicalNot():{}
{
    <NOT> (LogicalNot())?
}

void ParenExpr()#void:{}
{
    (<LPAREN> AndOrExpr() <RPAREN>)#ParenExpr(>0) | BasicExpr()
}

void AddExpr()#void:{}
{
    <PLUS> MultDivExpr()
}

void SubExpr()#void:{}
{
    <MINUS> MultDivExpr()
}

void MultExpr()#void:{}
{
    <FOIS> NegExpr()
}

void DivExpr()#void:{}
{
    <DIV> NegExpr()
}

void SwitchStmt():{}
{
    <SWITCH> <LPAREN> Expr() <RPAREN> <LACC>
        (CaseExpr())+
        (DefaultExpr())?

    <RACC>
}

void CaseExpr():{}
{
	<CASE> Expr() <COLON> BlockOrStatement()
}

void DefaultExpr():{}
{
	<DEAFULT> <COLON> BlockOrStatement()
}

